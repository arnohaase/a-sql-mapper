todo
----
* Setup / initialization: builder with "guessing" defaults
* Java Bean support
* unit tests
* javadoc

* comprehensive tests

* demo test
  * snippets

* mapper queries mit snippets --> how to do this best?
  * filter
  * pagination
  * order by
  * ...

* @ManyToMany: masterPk
* @ManyToOne: on a struct without mapped primary key

* ASqlMapper exception handling https://git.hypeinnovation.com/hype.io/hypeio-app/issues/117#note_2661

* update / patch: optionale zusÃ¤tzliche WHERE-Klausel
  * patch: Convenience-Methoden im SqlSnippet verwenden

* base
  * tuples
    * special handling, 'implicit' row extractor based on ptm
    * queries
    * for insert?

* optimized 'isStreaming=true' implementation for Java Beans extractor

* 'getter' convention based column name strategy

* unit tests
* documentation

* "derived" columns -> ?

* SQL snippets
  * "query by example": fields -> optional -> and

* optimistic locking
* db error classification

* statement check against live database ("yolo mode")

* i18n as String from to-many: generator / snippet / convenience in mapper?

* mapping layer
  * Java bean support
  * "semi-active" record --> generic 'model' class that keeps track of changes?
  * annotation processor for JOINs / type safe query building?

deploy
------
* increment version number in pom.xml
* > mvn clean deploy
* commit / push
* > git tag {version}
* > git push origin {version}

done
----
* insert, update, queries (raw)
  * query results as java.util.Stream
* primitive type mapping / coercion
* SqlRow --> detached wrapper around a result row
* SqlEngine
  * immutable, 'canHandle' (2x), mutable cache, 'live' registration of handlers (copy on write)
  * factory methods for queries, inserts, updates
* SqlMapper:
  * insert / update / patch / delete
  * to-many for queries (works for immutable beans)
* events, listener
  * statement logging
  * statistics
